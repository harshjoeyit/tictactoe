[{"/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/index.js":"1","/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/reportWebVitals.js":"2","/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/App.js":"3","/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/components/Game.js":"4","/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/index.js":"5","/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/App.js":"6","/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/reportWebVitals.js":"7","/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/components/Game.js":"8"},{"size":500,"mtime":1608580571499,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1608580571500,"results":"11","hashOfConfig":"10"},{"size":140,"mtime":1608611569886,"results":"12","hashOfConfig":"10"},{"size":5512,"mtime":1608700398185,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1608716284857,"results":"14","hashOfConfig":"15"},{"size":140,"mtime":1608716284855,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1608716284858,"results":"17","hashOfConfig":"15"},{"size":5512,"mtime":1608716284856,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"mxkl1d",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"wlr9mh",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/index.js",[],["38","39"],"/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/reportWebVitals.js",[],"/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/App.js",[],"/media/harshit/New Volume/Web Dev Projects Practice/React/tic-tac-toe/src/components/Game.js",["40","41"],"/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/index.js",[],["42","43"],"/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/App.js",[],"/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/reportWebVitals.js",[],"/media/harshit/New Volume/Web Dev Projects Practice/React/TicTacToeCopy/tictactoe/src/components/Game.js",["44","45"],"import React, { useState, useEffect } from 'react'\nimport './style.css'\n\nconst blockStates = {\n    BLANK: -1,\n    ZERO: 0,\n    CROSS: 1\n}\nconst players = {\n    PLAYER1: 0,\n    PLAYER2: 1\n}\n\nconst getInitState = () => {\n    const initState = {\n        grid: [],\n        player1: players.PLAYER1,\n        player2: players.PLAYER2,\n        gameOver: false,\n    }\n    const block = {\n        id: 0,\n        state: blockStates.BLANK,\n    }\n    for(let i=1; i<=9; i++) {\n        block.id = i;\n        initState.grid.push({ ...block })\n    }\n    return initState;\n}\n\nconst Game = () => {\n\n    const initGameState = {\n        turn: players.PLAYER1\n    }\n    \n    const [gameState, setGameState] = useState(initGameState)\n    const [state, setState] = useState(getInitState())\n\n    // runs when the grid changes \n    useEffect(() => {\n        if(state.gameOver === false) {\n            checkWinner()\n        } \n    }, [state.grid])\n\n\n    // resetting gameover status\n    useEffect(() => {\n        if(state.gameOver === true) {\n            \n            // reset grid for new game\n            setState(prevState => ({\n                ...prevState,\n                gameOver: false,\n            }))\n            \n            // reset to 1st turn of player 1\n            setGameState({turn: players.PLAYER1});\n        }\n    }, [state.gameOver])\n\n    // handler for click event \n    const handleClick = (id) => {\n        \n        const clickedBlock = state.grid.find(block => id === block.id);\n\n        if(clickedBlock.state !== blockStates.BLANK) {\n            // block is not blank\n            return;\n        }\n\n        // only when the blank block is clicked\n        const updatedGrid = state.grid.map(block => (\n            (block.id === id) ? ({\n                ...block,\n                state: gameState.turn \n            })\n            : block\n        ))\n        \n        // update the grid \n        setState(prevState => ({\n            ...prevState,\n            grid: updatedGrid\n        }))\n        \n        // change the turn of the players \n        setGameState((prevState) => ({\n            ...prevState,\n            turn: (prevState.turn === players.PLAYER1? players.PLAYER2: players.PLAYER1)\n        }))\n    } \n\n    const declareWinner = (winner) => {\n    \t\n    \tlet msg = \"\";\n    \t\n    \tif(winner === -1) {\n    \t   msg = \"Its a tie!\"\n    \t} else if(winner === 1) {\n    \t   msg = \"Player 1 Won!\"\n        } else {\n           msg = \"Player 2 Won!\"\n        }\n        \n        alert(msg);\n        \n        const resetGrid = state.grid.map(block => ({\n            ...block,\n            state: blockStates.BLANK\n        }))\n\n        setState(prevState => ({\n            ...prevState,\n            grid: resetGrid,\n            gameOver: true\n        }))\n    }\n\n    \n    // for identifying the winner \n    \n    const checkWinner = () => {\n        const grid = state.grid;\n        let winner = -1;\n\n        // check the columns for match\n        for(let i=0; i<3; i++) {\n            let j = 3*i;\n            if(grid[j].state !== blockStates.BLANK && \n            \tgrid[j].state === grid[j+1].state && \n                grid[j+1].state === grid[j+2].state) {\n                winner = gameState.turn;\n                declareWinner(winner);\n                return;\n            }\n        }\n\n        // check rows for the match \n        for(let j=0; j<3; j++) {\n            if(grid[j].state !== blockStates.BLANK && \n            \tgrid[j].state === grid[j+3].state &&\n                grid[j+3].state === grid[j+6].state) {\n                winner = gameState.turn;\n                declareWinner(winner);\n                return;\n            }\n        }\n\n        // check diagonal 1\n        if(grid[0].state !== blockStates.BLANK && \n            grid[0].state === grid[4].state && \n            grid[4].state === grid[8].state) {\n            winner = gameState.turn;\n            declareWinner(winner);\n            return;\n        }\n        \n        \n\t// check diagonal 2 \n        if(grid[2].state !== blockStates.BLANK && \n            grid[2].state === grid[4].state && \n            grid[4].state === grid[6].state) {\n            winner = gameState.turn;\n            declareWinner(winner);\n            return;\n        }\n\n        // if no winner then check tie, continue if no tie  \n        \n        // check if it is a tie\n        const tie = state.grid.every(block => block.state !== blockStates.BLANK);\n        if(tie === true) {\n           declareWinner(-1);\n        }\n    }\n\n\n    return (\n        <div className=\"main-container\">\n            <div className=\"player-container\">\n                <div className={`players ${gameState.turn === players.PLAYER1? 'active': ''}`}>\n                    Player 1\n                </div>\n                <div className={`players ${gameState.turn === players.PLAYER2? 'active': ''}`}>\n                    Player 2\n                </div>\n            </div>\n            <div className=\"grid\">\n            {\n                state.grid.map(block => (\n                    <div \n                        key={ block.id }\n                        className={`block ${block.state === 0? 'one': 'two'}`}\n                        onClick={() => { handleClick(block.id) }}\n                    >\n                    {\n                        (block.state != blockStates.BLANK) \n                        ? (block.state === 0) ? \"o\":\"x\" \n                        : \"\"\n                    }\n                    </div>\n                ))\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default Game\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":46,"column":8,"nodeType":"52","endLine":46,"endColumn":20,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":200,"column":38,"nodeType":"56","messageId":"57","endLine":200,"endColumn":40},{"ruleId":"46","replacedBy":"58"},{"ruleId":"48","replacedBy":"59"},{"ruleId":"50","severity":1,"message":"51","line":46,"column":8,"nodeType":"52","endLine":46,"endColumn":20,"suggestions":"60"},{"ruleId":"54","severity":1,"message":"55","line":200,"column":38,"nodeType":"56","messageId":"57","endLine":200,"endColumn":40},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkWinner' and 'state.gameOver'. Either include them or remove the dependency array.","ArrayExpression",["63"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["61"],["62"],["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"65","fix":"67"},"Update the dependencies array to be: [checkWinner, state.gameOver, state.grid]",{"range":"68","text":"69"},{"range":"70","text":"69"},[909,921],"[checkWinner, state.gameOver, state.grid]",[909,921]]